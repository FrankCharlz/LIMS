<?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('home');
});

Route::get('/landing', function () {
    return view('welcome');
});

Auth::routes();

Route::get('/home', 'HomeController@index');


Route::get('/plots/add/{lat}/{lng}', 'PlotsController@add')->middleware('auth');
Route::post('/plots/new', 'PlotsController@new_plot')->middleware('auth');

Route::get('/plots/view/{id}', 'PlotsController@view');
Route::get('/plots/all', 'PlotsController@all');


//applications
Route::get('/applications/user/{uid}', 'ApplicationController@listForUser');
Route::get('/applications/all', 'ApplicationController@listAll');
Route::get('/applications/create/{pid}', 'ApplicationController@create');
Route::get('/applications/cancel/{id}', 'ApplicationController@cancel');

Route::get('/outis/images/{filename}', function ($filename) {

    //filename = /images/....png
    $path = storage_path('app/images/' . $filename);

    //dd($path);

    if (!File::exists($path)) {
        abort(404);
    }

    $file = File::get($path);
    $type = File::mimeType($path);

    $response = Response::make($file, 200);
    $response->header("Content-Type", $type);

    return $response;
});


function get_center($polygon) {
    $a = $polygon[0]; $b = $polygon[1]; $c = $polygon[2];
    return [
        ($a[0] + $b[0])/2,
        ($b[1] + $c[1])/2,
    ];
}
Route::get('/xxx', function() {

    $polygons = [[[-6.832375936956543, 39.28199172019959], [-6.832375936956543, 39.282237620199595], [-6.832239036956543, 39.282237620199595], [-6.832239036956543, 39.28199172019959]], [[-6.832375936956543, 39.282237620199595], [-6.832375936956543, 39.2824835201996], [-6.832239036956543, 39.2824835201996], [-6.832239036956543, 39.282237620199595]], [[-6.832375936956543, 39.2824835201996], [-6.832375936956543, 39.2827294201996], [-6.832239036956543, 39.2827294201996], [-6.832239036956543, 39.2824835201996]], [[-6.832375936956543, 39.2827294201996], [-6.832375936956543, 39.282975320199604], [-6.832239036956543, 39.282975320199604], [-6.832239036956543, 39.2827294201996]], [[-6.832375936956543, 39.282975320199604], [-6.832375936956543, 39.28322122019961], [-6.832239036956543, 39.28322122019961], [-6.832239036956543, 39.282975320199604]], [[-6.832375936956543, 39.28322122019961], [-6.832375936956543, 39.28346712019961], [-6.832239036956543, 39.28346712019961], [-6.832239036956543, 39.28322122019961]], [[-6.832375936956543, 39.28346712019961], [-6.832375936956543, 39.28371302019961], [-6.832239036956543, 39.28371302019961], [-6.832239036956543, 39.28346712019961]], [[-6.832375936956543, 39.28371302019961], [-6.832375936956543, 39.283958920199616], [-6.832239036956543, 39.283958920199616], [-6.832239036956543, 39.28371302019961]], [[-6.832239036956543, 39.28199172019959], [-6.832239036956543, 39.282237620199595], [-6.832102136956543, 39.282237620199595], [-6.832102136956543, 39.28199172019959]], [[-6.832239036956543, 39.282237620199595], [-6.832239036956543, 39.2824835201996], [-6.832102136956543, 39.2824835201996], [-6.832102136956543, 39.282237620199595]], [[-6.832239036956543, 39.2824835201996], [-6.832239036956543, 39.2827294201996], [-6.832102136956543, 39.2827294201996], [-6.832102136956543, 39.2824835201996]], [[-6.832239036956543, 39.2827294201996], [-6.832239036956543, 39.282975320199604], [-6.832102136956543, 39.282975320199604], [-6.832102136956543, 39.2827294201996]], [[-6.832239036956543, 39.282975320199604], [-6.832239036956543, 39.28322122019961], [-6.832102136956543, 39.28322122019961], [-6.832102136956543, 39.282975320199604]], [[-6.832239036956543, 39.28322122019961], [-6.832239036956543, 39.28346712019961], [-6.832102136956543, 39.28346712019961], [-6.832102136956543, 39.28322122019961]], [[-6.832239036956543, 39.28346712019961], [-6.832239036956543, 39.28371302019961], [-6.832102136956543, 39.28371302019961], [-6.832102136956543, 39.28346712019961]], [[-6.832239036956543, 39.28371302019961], [-6.832239036956543, 39.283958920199616], [-6.832102136956543, 39.283958920199616], [-6.832102136956543, 39.28371302019961]], [[-6.832102136956543, 39.28199172019959], [-6.832102136956543, 39.282237620199595], [-6.831965236956543, 39.282237620199595], [-6.831965236956543, 39.28199172019959]], [[-6.832102136956543, 39.282237620199595], [-6.832102136956543, 39.2824835201996], [-6.831965236956543, 39.2824835201996], [-6.831965236956543, 39.282237620199595]], [[-6.832102136956543, 39.2824835201996], [-6.832102136956543, 39.2827294201996], [-6.831965236956543, 39.2827294201996], [-6.831965236956543, 39.2824835201996]], [[-6.832102136956543, 39.2827294201996], [-6.832102136956543, 39.282975320199604], [-6.831965236956543, 39.282975320199604], [-6.831965236956543, 39.2827294201996]], [[-6.832102136956543, 39.282975320199604], [-6.832102136956543, 39.28322122019961], [-6.831965236956543, 39.28322122019961], [-6.831965236956543, 39.282975320199604]], [[-6.832102136956543, 39.28322122019961], [-6.832102136956543, 39.28346712019961], [-6.831965236956543, 39.28346712019961], [-6.831965236956543, 39.28322122019961]], [[-6.832102136956543, 39.28346712019961], [-6.832102136956543, 39.28371302019961], [-6.831965236956543, 39.28371302019961], [-6.831965236956543, 39.28346712019961]], [[-6.832102136956543, 39.28371302019961], [-6.832102136956543, 39.283958920199616], [-6.831965236956543, 39.283958920199616], [-6.831965236956543, 39.28371302019961]], [[-6.831965236956543, 39.28199172019959], [-6.831965236956543, 39.282237620199595], [-6.8318283369565425, 39.282237620199595], [-6.8318283369565425, 39.28199172019959]], [[-6.831965236956543, 39.282237620199595], [-6.831965236956543, 39.2824835201996], [-6.8318283369565425, 39.2824835201996], [-6.8318283369565425, 39.282237620199595]], [[-6.831965236956543, 39.2824835201996], [-6.831965236956543, 39.2827294201996], [-6.8318283369565425, 39.2827294201996], [-6.8318283369565425, 39.2824835201996]], [[-6.831965236956543, 39.2827294201996], [-6.831965236956543, 39.282975320199604], [-6.8318283369565425, 39.282975320199604], [-6.8318283369565425, 39.2827294201996]], [[-6.831965236956543, 39.282975320199604], [-6.831965236956543, 39.28322122019961], [-6.8318283369565425, 39.28322122019961], [-6.8318283369565425, 39.282975320199604]], [[-6.831965236956543, 39.28322122019961], [-6.831965236956543, 39.28346712019961], [-6.8318283369565425, 39.28346712019961], [-6.8318283369565425, 39.28322122019961]], [[-6.831965236956543, 39.28346712019961], [-6.831965236956543, 39.28371302019961], [-6.8318283369565425, 39.28371302019961], [-6.8318283369565425, 39.28346712019961]], [[-6.831965236956543, 39.28371302019961], [-6.831965236956543, 39.283958920199616], [-6.8318283369565425, 39.283958920199616], [-6.8318283369565425, 39.28371302019961]]];
    $plots = \App\Plot::inRandomOrder()->get();
    $i = 0;
    foreach ($plots as $plot) {
        $plot->boundaries = json_encode($polygons[$i]);
        $center = get_center($polygons[$i]);
        //dd($center);
        $plot->latitude = $center[0];
        $plot->longitude = $center[1];
        $plot->save();
        $i++;
        $i %= sizeof($polygons);
        //if ($i === 10) break;
        //dd($plot);
    }
    return 0;

});